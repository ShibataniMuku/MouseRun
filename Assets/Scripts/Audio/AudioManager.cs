using DG.Tweening;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.SceneManagement;
using static UnityEditor.Experimental.GraphView.GraphView;

public class AudioManager : MonoBehaviour
{
    [SerializeField, Tooltip("?I?[?f?B?I?~?L?T?[")]
    private AudioMixer _audioMixer;
    [SerializeField, Tooltip("BGM?p??AudioSource")]
    private AudioSource _bgmAudioSource;
    [SerializeField, Tooltip("SE?p??AudioSource")]
    private AudioSource _seAudioSource;

    private AudioData _audioData;
    private BgmEnum stackedBgm;
    private bool _isStacked = false; // BGM???X?^?b?N????????????????

    //public static AudioManager audioManagerInstance;

    private void Awake()
    {
        _audioData = GetAudioData();
    }

    // Start is called before the first frame update
    void Start()
    {
        CheckBgmOverlap(_audioData.bgmData);
        CheckSeOverlap(_audioData.seData);

        SceneManager.activeSceneChanged += PlayStackedBgm;

        // ================ ?? ??????????BGM???e?X?g???????????? ==============================
       PlayBGM(BgmEnum.title);
    }

    /// <summary>
    /// ??????BGM???o?^??????????????????
    /// </summary>
    /// <param name="data">?o?^BGM?f?[?^</param>
    private void CheckBgmOverlap(List<BgmClipData> data)
    {
        List<BgmEnum> bgm = new List<BgmEnum>();
        for (int i = 0; i < data.Count; i++)
        {
            if (bgm.Contains(data[i].type))
            {
                Debug.LogError(string.Format($"?T?E???h {data[i].type} ???d????????????"));
            }
            else
            {
                bgm.Add(data[i].type);
            }
        }
    }

    /// <summary>
    /// ??????SE???o?^??????????????????
    /// </summary>
    /// <param name="data">?o?^SE?f?[?^</param>
    private void CheckSeOverlap(List<SeClipData> data)
    {
        List<SeEnum> bgm = new List<SeEnum>();
        for (int i = 0; i < data.Count; i++)
        {
            if (bgm.Contains(data[i].type))
            {
                Debug.LogError(string.Format($"?T?E???h {data[i].type} ???d????????????"));
            }
            else
            {
                bgm.Add(data[i].type);
            }
        }
    }

    /// <summary>
    /// BgmClipData???o?^???????T?E???h???AEnum????????????????
    /// </summary>
    /// <param name="data">BGM???o?^?f?[?^</param>
    /// <param name="bgm">?T??????BGM??Enum</param>
    private int ConvertBgmEnumIntoIndex(List<BgmClipData> data, BgmEnum bgm)
    {
        for (int i = 0; i < data.Count; i++)
        {
            if (bgm == data[i].type) return i;
        }

        Debug.LogError(string.Format($"?w???????? {bgm} ???f?[?^???????????????B" +
            $"AudioData ?????? BgmEnum ???????????????????o?^?????????????A?????????A????????BGM???f?[?^???w?????????????????????????????????????B"));

        return -1;
    }

    /// <summary>
    /// SeClipData???o?^???????T?E???h???AEnum????????????????
    /// </summary>
    /// <param name="data">SE???o?^?f?[?^</param>
    /// <param name="bgm">?T??????SE??Enum</param>
    private int ConvertSeEnumIntoIndex(List<SeClipData> data, SeEnum se)
    {
        for (int i = 0; i < data.Count; i++)
        {
            if (se == data[i].type) return i;
        }

        Debug.LogError(string.Format($"?w???????? {se} ???f?[?^???????????????B" +
            $"AudioData ?????? BgmEnum ???????????????????o?^?????????????A?????????A????????SE???f?[?^???w?????????????????????????????????????B"));
        return -1;
    }

    /// <summary>
    /// ?}?X?^?[????????AudioMixer???Z?b?g
    /// </summary>
    /// <param name="volume">????</param>
    public void SetMasterVolumeForAudioMixer(float volume)
    {
        //-80~0??????
        var convertedVolume = Mathf.Clamp(Mathf.Log10(volume) * 20f, -80f, 0f);
        //audioMixer??????
        _audioMixer.SetFloat("Master", convertedVolume);
        Debug.Log($"MasterVolume: {volume}");
    }

    /// <summary>
    /// BGM????????AudioMixer???Z?b?g
    /// </summary>
    /// <param name="volume">????</param>
    public void SetBgmVolumeForAudioMixer(float volume)
    {
        //-80~0??????
        var convertedVolume = Mathf.Clamp(Mathf.Log10(volume) * 20f, -80f, 0f);
        //audioMixer??????
        _audioMixer.SetFloat("BGM", convertedVolume);
        Debug.Log($"BGMVolume: {volume}");
    }

    /// <summary>
    /// SE????????AudioMixer???Z?b?g
    /// </summary>
    /// <param name="volume">????</param>
    public void SetSeVolumeForAudioMixer(float volume)
    {
        //-80~0??????
        var convertedVolume = Mathf.Clamp(Mathf.Log10(volume) * 20f, -80f, 0f);
        //audioMixer??????
        _audioMixer.SetFloat("SE", convertedVolume);
        Debug.Log($"SEVolume: {volume}");
    }

    /// <summary>
    /// ?T?E???h????????????????
    /// </summary>
    /// <returns>?????f?[?^</returns>
    private AudioData GetAudioData()
    {
        string path = "AudioData";
        AudioData data = Resources.Load<AudioData>(path);
        return data;
    }

    /// <summary>
    /// SE??????????
    /// </summary>
    /// <param name="se">????????SE</param>
    public void PlaySE(SeEnum se)
    {
        int index = this.ConvertSeEnumIntoIndex(_audioData.seData, se);
        _seAudioSource.volume = _audioData.seData[index].volume;
        _seAudioSource.PlayOneShot(_audioData.seData[index].clip);
    }

    /// <summary>
    /// SE??????????
    /// </summary>
    /// <param name="se">????????SE</param>
    /// <param name="isSingle">true???w???????P????SE?????????i???????\?j</param>
    public void PlaySE(SeEnum se, bool isSingle)
    {
        int index = this.ConvertSeEnumIntoIndex(_audioData.seData, se);
        _seAudioSource.clip = _audioData.seData[index].clip;
        _seAudioSource.volume = _audioData.seData[index].volume;
        if (isSingle) { _seAudioSource.Play(); } else { _seAudioSource.PlayOneShot(_audioData.seData[index].clip); }
    }

    public void StopSE() { _seAudioSource.Stop(); }
    public void PauseSE() { _seAudioSource.Pause(); }
    public void UnPauseSE() { _seAudioSource.UnPause(); }

    // ?V?[????????????????????????????
    private void PlayStackedBgm(Scene thisScene, Scene nextScene)
    {
        // ?X?^?b?N?????????????????A?V?[???J??????BGM??????
        if (_isStacked)
        {
            PlayBGM(stackedBgm);
            _isStacked = false;
        }
    }

    /// <summary>
    /// ?????V?[????????????????????????????BGM???o?^????
    /// </summary>
    /// <param name="bgm">?o?^????BGM</param>
    public void StackBgm(BgmEnum bgm)
    {
        stackedBgm = bgm;
        _isStacked = true;
    }

    public void PlayBGM(BgmEnum bgm)
    {
        int index = this.ConvertBgmEnumIntoIndex(_audioData.bgmData, bgm);
        _bgmAudioSource.clip = _audioData.bgmData[index].clip;
        _bgmAudioSource.volume = _audioData.bgmData[index].volume;
        _bgmAudioSource.Play();
    }

    /// <summary>
    /// ?w????????????????BGM???t?F?[?h?A?E?g????
    /// </summary>
    /// <param name="fadeTime"></param>
    public void StopBGM(float fadeTime)
    {
        DOTween.To(() => _bgmAudioSource.volume, (x) => 
        {
            _bgmAudioSource.volume = x;
        }, 0, fadeTime)
            .OnComplete(() => _bgmAudioSource.Stop());
    }
    public void StopBGM() { _bgmAudioSource.Stop(); }
    public void PauseBGM() { _bgmAudioSource.Pause(); }
    public void UnPauseBGM() { _bgmAudioSource.UnPause(); }
}
